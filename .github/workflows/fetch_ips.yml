# GitHub Action 的名称
name: Collect IP Addresses with Geolocation

# 工作流触发条件
on:
  schedule:
    # 每天UTC时间00:00和12:00执行 (对应北京时间08:00和20:00)
    - cron: '0 0,12 * * *'
  workflow_dispatch: # 允许手动触发

# 为工作流设置权限
permissions:
  contents: write # 允许工作流写入仓库内容

# 定义一个或多个作业
jobs:
  collect-ips:
    # 指定运行环境
    runs-on: ubuntu-latest
    
    # 作业中的步骤
    steps:
    # 第一步：检出代码
    - name: Checkout repository
      uses: actions/checkout@v4
    
    # 第二步：安装依赖项
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y jq dnsutils
        pip install requests beautifulsoup4 lxml
    
    # 第三步：运行Python脚本采集IP并查询地理位置
    - name: Collect IPs with Geolocation
      run: |
        python3 << 'EOF'
        import requests
        import re
        from bs4 import BeautifulSoup
        import socket
        import time
        import json

        def get_chinese_country_name(code):
            """将国家代码映射到中文名称"""
            country_mapping = {
                "US": "美国", "CA": "加拿大", "CN": "中国",
                "HK": "中国香港", "TW": "中国台湾", "JP": "日本",
                "KR": "韩国", "SG": "新加坡", "GB": "英国",
                "DE": "德国", "FR": "法国", "AU": "澳大利亚",
                "NL": "荷兰", "RU": "俄罗斯", "IN": "印度",
                "BR": "巴西", "VN": "越南", "MY": "马来西亚",
                "TH": "泰国", "ID": "印度尼西亚",
                "CY": "塞浦路斯", "SC": "塞舌尔", "MU": "毛里求斯",
                "PH": "菲律宾", "IT": "意大利", "ES": "西班牙",
                "SE": "瑞典", "NO": "挪威", "DK": "丹麦",
                "FI": "芬兰", "CH": "瑞士", "AT": "奥地利",
                "BE": "比利时", "PT": "葡萄牙", "IE": "爱尔兰",
                "GR": "希腊", "PL": "波兰", "CZ": "捷克",
                "HU": "匈牙利", "RO": "罗马尼亚", "BG": "保加利亚",
                "HR": "克罗地亚", "SI": "斯洛文尼亚", "SK": "斯洛伐克",
                "EE": "爱沙尼亚", "LV": "拉脱维亚", "LT": "立陶宛",
                "LU": "卢森堡", "MT": "马耳他", "IS": "冰岛",
                "TR": "土耳其", "UA": "乌克兰", "BY": "白俄罗斯",
                "MD": "摩尔多瓦", "AL": "阿尔巴尼亚", "BA": "波黑",
                "MK": "北马其顿", "ME": "黑山", "RS": "塞尔维亚",
                "XK": "科索沃", "AR": "阿根廷", "CL": "智利",
                "CO": "哥伦比亚", "PE": "秘鲁", "VE": "委内瑞拉",
                "UY": "乌拉圭", "PY": "巴拉圭", "BO": "玻利维亚",
                "EC": "厄瓜多尔", "GY": "圭亚那", "SR": "苏里南",
                "MX": "墨西哥", "GT": "危地马拉", "BZ": "伯利兹",
                "SV": "萨尔瓦多", "HN": "洪都拉斯", "NI": "尼加拉瓜",
                "CR": "哥斯达黎加", "PA": "巴拿马", "CU": "古巴",
                "JM": "牙买加", "HT": "海地", "DO": "多米尼加",
                "PR": "波多黎各", "TT": "特立尼达和多巴哥",
                "BB": "巴巴多斯", "GD": "格林纳达", "LC": "圣卢西亚",
                "VC": "圣文森特和格林纳丁斯", "AG": "安提瓜和巴布达",
                "DM": "多米尼克", "KN": "圣基茨和尼维斯",
                "BS": "巴哈马", "BM": "百慕大", "KY": "开曼群岛",
                "VI": "美属维尔京群岛"
            }
            return country_mapping.get(code, code)

        def query_ip_geolocation(ip):
            """使用 ipinfo.io API 查询IP的地理位置"""
            try:
                api_url = f"https://ipinfo.io/{ip}/json"
                response = requests.get(api_url, timeout=10)
                response.raise_for_status()
                data = response.json()
                country_code = data.get('country')
                if country_code:
                    return country_code, get_chinese_country_name(country_code)
                return None, None
            except Exception as e:
                print(f"查询IP {ip} 地理位置失败: {e}")
                return None, None

        def validate_and_filter_ips(ips):
            """验证IP地址格式并过滤掉私有IP"""
            valid_ips = []
            for ip in set(ips): # 使用set去重
                try:
                    socket.inet_aton(ip)
                    octets = ip.split('.')
                    if not (octets[0] == '10' or
                            (octets[0] == '172' and 16 <= int(octets[1]) <= 31) or
                            (octets[0] == '192' and octets[1] == '168') or
                            octets[0] == '127'):
                        valid_ips.append(ip)
                except socket.error:
                    continue
            return valid_ips

        def get_telecom_ips_from_source1():
            """从源1 (cf.090227.xyz) 采集电信线路IP"""
            url = "https://cf.090227.xyz/"
            headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'}
            try:
                response = requests.get(url, headers=headers, timeout=30)
                response.raise_for_status()
                soup = BeautifulSoup(response.text, 'html.parser')
                text_content = soup.get_text()
                
                # 优先查找包含 "电信" 或 "telecom" 的行中的IP
                telecom_ips = []
                ip_pattern = r'\b(?:[0-9]{1,3}\.){3}[0-9]{1,3}\b'
                for line in text_content.split('\n'):
                    if '电信' in line or 'telecom' in line.lower():
                        telecom_ips.extend(re.findall(ip_pattern, line))

                # 如果找不到特定关键词，则提取页面所有IP
                if not telecom_ips:
                    print("在源1中未找到电信关键词，提取所有IP...")
                    telecom_ips = re.findall(ip_pattern, text_content)

                return telecom_ips
            except Exception as e:
                print(f"从源1采集失败: {e}")
                return []
        
        def get_ips_from_source2():
            """从源2 (ip.164746.xyz) 采集IP"""
            url = "https://ip.164746.xyz/"
            headers = {'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36'}
            try:
                response = requests.get(url, headers=headers, timeout=30)
                response.raise_for_status()
                soup = BeautifulSoup(response.text, 'html.parser')
                text_content = soup.get_text()
                ip_pattern = r'\b(?:[0-9]{1,3}\.){3}[0-9]{1,3}\b'
                # 提取页面所有IP，并取前10个
                all_ips = re.findall(ip_pattern, text_content)
                return all_ips[:10]
            except Exception as e:
                print(f"从源2采集失败: {e}")
                return []

        # --- 主程序开始 ---
        print("开始从源1 (cf.090227.xyz) 采集电信线路IP地址...")
        telecom_ips = get_telecom_ips_from_source1()
        print(f"从源1找到 {len(telecom_ips)} 个IP地址")

        print("开始从源2 (ip.164746.xyz) 采集IP地址...")
        new_source_ips = get_ips_from_source2()
        print(f"从源2找到 {len(new_source_ips)} 个IP地址")

        # 合并并验证所有IP
        combined_ips = telecom_ips + new_source_ips
        valid_ips = validate_and_filter_ips(combined_ips)
        print(f"合并、去重和验证后，总共 {len(valid_ips)} 个有效IP地址待处理")
        
        if valid_ips:
            results = []
            error_log = []
            
            # 遍历IP列表，查询地理位置并格式化
            for i, ip in enumerate(sorted(valid_ips), 1):
                print(f"正在查询第 {i}/{len(valid_ips)} 个IP: {ip}")
                country_code, chinese_name = query_ip_geolocation(ip)
                sequence = f"{i:02d}" # 格式化序号为两位数
                
                if country_code and chinese_name:
                    result_line = f"{ip}:2096#{country_code}{chinese_name}{sequence}"
                    results.append(result_line)
                    print(f"  -> 结果: {result_line}")
                else:
                    result_line = f"{ip}:2096#UNKNOWN未知{sequence}"
                    results.append(result_line)
                    error_log.append(f"IP {ip} 地理位置查询失败")
                    print(f"  -> 查询失败: {result_line}")
                
                time.sleep(1) # 避免API请求过于频繁
            
            # 将结果写入文件
            with open('telecom_ips.txt', 'w', encoding='utf-8') as f:
                f.write('\n'.join(results))
            
            if error_log:
                with open('geolocation_errors.txt', 'w', encoding='utf-8') as f:
                    f.write('\n'.join(error_log))
            
            print(f"所有结果已保存到 telecom_ips.txt，共 {len(results)} 条记录")
        else:
            print("未找到任何有效IP地址")
            # 创建一个空文件以避免后续步骤出错
            with open('telecom_ips.txt', 'w', encoding='utf-8') as f:
                f.write("")
        EOF
    
    # 第四步：检查脚本运行结果
    - name: Check results
      run: |
        if [ -f "telecom_ips.txt" ]; then
          echo "文件 'telecom_ips.txt' 创建成功"
          echo "文件大小: $(wc -l < telecom_ips.txt) 行"
          echo "文件内容预览:"
          head -10 telecom_ips.txt
          if [ -f "geolocation_errors.txt" ]; then
            echo "发现错误日志 'geolocation_errors.txt':"
            cat geolocation_errors.txt
          fi
        else
          echo "文件 'telecom_ips.txt' 创建失败"
        fi
    
    # 第五步：提交并推送变更到仓库
    - name: Commit and push changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add telecom_ips.txt
        
        if [ -f "geolocation_errors.txt" ]; then
          git add geolocation_errors.txt
        fi
        
        if git diff --staged --quiet; then
          echo "文件内容无变化，无需提交。"
        else
          git commit -m "Update IP addresses with geolocation - $(date +'%Y-%m-%d %H:%M:%S')"
          git push
        fi
    
    # 第六步：上传产物，方便下载
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ip-list-with-geolocation
        path: |
          telecom_ips.txt
          geolocation_errors.txt
        if-no-files-found: ignore
        retention-days: 30
