# GitHub Action 的名称
name: Collect IP Addresses with Geolocation

# 工作流触发条件
on:
  schedule:
    - cron: '0 0,12 * * *'
  workflow_dispatch:

permissions:
  contents: write

jobs:
  collect-ips:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.x'

    - name: Install Python dependencies
      run: |
        pip install requests beautifulsoup4 lxml

    - name: Collect IPs from all sources
      run: |
        python3 << 'EOF'
        import requests
        import re
        from bs4 import BeautifulSoup
        import socket
        import time
        import json

        def get_chinese_country_name(code):
            country_mapping = {
                "US": "美国", "CA": "加拿大", "CN": "中国", "HK": "中国香港", "TW": "中国台湾",
                "JP": "日本", "KR": "韩国", "SG": "新加坡", "GB": "英国", "DE": "德国",
                "FR": "法国", "AU": "澳大利亚", "NL": "荷兰", "RU": "俄罗斯", "IN": "印度",
                "BR": "巴西", "VN": "越南", "MY": "马来西亚", "TH": "泰国", "ID": "印度尼西亚",
                "PH": "菲律宾", "IT": "意大利", "ES": "西班牙", "SE": "瑞典", "CH": "瑞士"
            }
            return country_mapping.get(code, code)

        def query_ip_geolocation(ip):
            try:
                response = requests.get(f"https://ipinfo.io/{ip}/json", timeout=10)
                data = response.json()
                country_code = data.get('country')
                return country_code, get_chinese_country_name(country_code)
            except:
                return None, None

        def validate_and_filter_ips(ips):
            valid_ips = []
            for ip in set(ips):
                try:
                    socket.inet_aton(ip)
                    octets = ip.split('.')
                    if not (octets[0] == '10' or
                            (octets[0] == '172' and 16 <= int(octets[1]) <= 31) or
                            (octets[0] == '192' and octets[1] == '168') or
                            octets[0] == '127'):
                        valid_ips.append(ip)
                except:
                    continue
            return valid_ips

        def get_ips_from_source1():
            url = "https://cf.090227.xyz/"
            try:
                response = requests.get(url, timeout=30)
                soup = BeautifulSoup(response.text, 'lxml')
                ips = []
                for row in soup.find_all('tr'):
                    cells = row.find_all('td')
                    if len(cells) > 1 and '电信' in cells[0].text:
                        found = re.findall(r'\b(?:[0-9]{1,3}\.){3}[0-9]{1,3}\b', cells[1].text)
                        ips.extend(found)
                return ips
            except:
                return []

        def get_ips_from_source2():
            url = "https://ip.164746.xyz/"
            try:
                response = requests.get(url, timeout=30)
                text = response.text
                return re.findall(r'\b(?:[0-9]{1,3}\.){3}[0-9]{1,3}\b', text)[:10]
            except:
                return []

        def get_ips_from_source3():
            url = "https://api.hostmonit.com/get_optimization_ip?type=1"
            try:
                response = requests.get(url, timeout=15)
                data = response.json()
                return [item['ip'] for item in data.get('info', [])]
            except:
                return []

        def process_and_save(ips, filename):
            if not ips:
                open(filename, 'w').close()
                return []
            results = []
            errors = []
            for i, ip in enumerate(sorted(ips), 1):
                cc, cn = query_ip_geolocation(ip)
                if cc and cn:
                    line = f"{ip}:2096#{cc}{cn}{i:02d}"
                else:
                    line = f"{ip}:2096#UNKNOWN未知{i:02d}"
                    errors.append(ip)
                results.append(line)
                time.sleep(1)
            with open(filename, 'w') as f:
                f.write('\n'.join(results))
            return errors

        print("--- Processing source 1 ---")
        ips1 = validate_and_filter_ips(get_ips_from_source1())
        err1 = process_and_save(ips1, "1.txt")

        print("--- Processing source 2 ---")
        ips2 = validate_and_filter_ips(get_ips_from_source2())
        err2 = process_and_save(ips2, "2.txt")

        print("--- Processing source 3 ---")
        ips3 = validate_and_filter_ips(get_ips_from_source3())
        err3 = process_and_save(ips3, "3.txt")

        all_ips = sorted(set(ips1 + ips2 + ips3))
        process_and_save(all_ips, "all.txt")

        all_errors = err1 + err2 + err3
        if all_errors:
            with open("geolocation_errors.txt", 'w') as f:
                f.write('\n'.join(all_errors))
        EOF

    - name: Commit and push results
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add 1.txt 2.txt 3.txt all.txt geolocation_errors.txt || true
        if git diff --cached --quiet; then
          echo "No changes to commit."
        else
          git commit -m "Update IP lists"
          git push

    - name: Upload results
      uses: actions/upload-artifact@v4
      with:
        name: ip-lists
        path: |
          1.txt
          2.txt
          3.txt
          all.txt
          geolocation_errors.txt
        if-no-files-found: ignore
        retention-days: 30
