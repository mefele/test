name: Fetch, Resolve, and Geolocate IPs/Domains (with ipinfo.io)

on:
  schedule:
    # 每3小时运行一次 (0, 3, 6, 9, 12, 15, 18, 21点 UTC)
    - cron: '0 */3 * * *'
  workflow_dispatch: # 允许手动触发

permissions:
  contents: write # 允许工作流写入仓库

jobs:
  fetch_and_process:
    runs-on: ubuntu-latest
    # 不再需要 IPDATA_API_KEY
    # env:
    #   IPDATA_API_KEY: ${{ secrets.IPDATA_API_KEY }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies (jq, dig)
        run: |
          sudo apt-get update
          sudo apt-get install -y jq dnsutils # dnsutils 包含 dig

      # 不再需要检查 IPDATA_API_KEY
      # - name: Check for IPDATA_API_KEY
      #   run: |
      #     if [ -z "${IPDATA_API_KEY}" ]; then
      #       echo "Error: IPDATA_API_KEY secret is not set. Please add it to your repository secrets."
      #       exit 1
      #     fi
      #     echo "IPDATA_API_KEY found."

      - name: Fetch targets (IPs/Domains) from sources
        id: fetch_targets
        run: |
          echo "Fetching targets from source 1 (ymyuuu)..."
          curl -sSL "https://raw.githubusercontent.com/ymyuuu/IPDB/refs/heads/main/BestCF/bestcfv4.txt" > targets_source1.txt
          echo "Fetching targets from source 2 (ethgan)..."
          curl -sSL "https://raw.githubusercontent.com/ethgan/yxip/refs/heads/main/ip.txt" > targets_source2.txt
          echo "Fetching targets from source 3 (mefele)..."
          curl -sSL "https://raw.githubusercontent.com/mefele/test/refs/heads/main/1.txt" > targets_source3.txt
          
          echo "Combining and unique targets from 3 sources..."
          cat targets_source1.txt targets_source2.txt targets_source3.txt | sed '/^\s*$/d' | sort -u > all_unique_targets.txt
          
          echo "Total unique targets found: $(wc -l < all_unique_targets.txt)"
          if [ ! -s all_unique_targets.txt ]; then
            echo "No targets found to process."
            echo "NO_TARGETS=true" >> $GITHUB_ENV
          else
            echo "NO_TARGETS=false" >> $GITHUB_ENV
          fi

      - name: Resolve domains and geolocate (using ipinfo.io)
        # if: env.NO_TARGETS == 'false' && env.IPDATA_API_KEY != '' # 移除API Key检查
        if: env.NO_TARGETS == 'false'
        run: |
          echo "Starting domain resolution and geolocation process with ipinfo.io..."
          OUTPUT_FILE="geolocated_targets.txt"
          ERROR_LOG_FILE="geolocation_errors.txt"
          > "$OUTPUT_FILE" 
          > "$ERROR_LOG_FILE"

          # 函数：将国家代码映射到中文名称
          get_chinese_country_name() {
            local code="$1"
            # ipinfo.io 免费版通常不直接返回英文国家名，所以第二个参数可能为空
            # 我们主要依赖国家代码进行映射
            case "$code" in
              "US") echo "美国";; "CA") echo "加拿大";; "CN") echo "中国";;
              "HK") echo "中国香港";; "TW") echo "中国台湾";; "JP") echo "日本";;
              "KR") echo "韩国";; "SG") echo "新加坡";; "GB") echo "英国";;
              "DE") echo "德国";; "FR") echo "法国";; "AU") echo "澳大利亚";;
              "NL") echo "荷兰";; "RU") echo "俄罗斯";; "IN") echo "印度";;
              "BR") echo "巴西";; "VN") echo "越南";; "MY") echo "马来西亚";;
              "TH") echo "泰国";; "ID") echo "印度尼西亚";;
              "CY") echo "塞浦路斯";; # 从您的结果中添加
              "SC") echo "塞舌尔";;   # 从您的结果中添加
              "MU") echo "毛里求斯";; # 从您的结果中添加
              "PH") echo "菲律宾";;   # 从您的结果中添加
              # 在此添加更多常见的国家代码和中文名称映射
              *) echo "$code";; # 如果没有匹配，返回原始国家代码 (ipinfo.io可能不返回英文名)
            esac
          }
          export -f get_chinese_country_name

          is_ip_address() {
            local target="$1"
            if [[ "$target" =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
              return 0 # true
            else
              return 1 # false
            fi
          }

          while IFS= read -r target_line; do
            target_line=$(echo "$target_line" | tr -d '\r' | xargs)
            if [ -z "$target_line" ]; then
              continue
            fi

            original_target="$target_line"
            ip_to_query=""

            if is_ip_address "$target_line"; then
              ip_to_query="$target_line"
              echo "Processing IP: $ip_to_query (from input: $original_target)"
            else
              echo "Processing Domain: $target_line, attempting to resolve..."
              resolved_ip=$(dig +short A "$target_line" | grep -Eo "([0-9]{1,3}\.){3}[0-9]{1,3}" | head -n 1)
              
              if [ -z "$resolved_ip" ]; then
                echo "Error: Could not resolve domain $target_line to a valid IP" >> "$ERROR_LOG_FILE"
                echo "$original_target#DOMAIN_RESOLUTION_FAILED" >> "$OUTPUT_FILE"
                sleep 0.5 
                continue
              else
                ip_to_query="$resolved_ip"
                echo "Domain $target_line resolved to IP: $ip_to_query"
              fi
            fi
            
            # 使用 ipinfo.io 查询
            # 如果您有 ipinfo.io 的 API Key, 可以替换为:
            # api_url="https://ipinfo.io/${ip_to_query}/json?token=YOUR_IPINFO_API_KEY"
            api_url="https://ipinfo.io/${ip_to_query}/json"
            response=$(curl -sSL "$api_url")
            
            # ipinfo.io 的响应中，国家代码在 .country 字段
            # IP在 .ip 字段
            # 检查 .country 是否存在且不为 null
            countryCode=$(echo "$response" | jq -r .country)
            queryIp=$(echo "$response" | jq -r .ip) # API确认的IP

            if [ "$countryCode" != "null" ] && [ -n "$countryCode" ]; then
              # ipinfo.io 免费版可能不直接返回英文国家名，我们主要用 countryCode
              chineseCountryName=$(get_chinese_country_name "$countryCode")
              echo "$original_target#${countryCode}${chineseCountryName}" >> "$OUTPUT_FILE"
            else
              # 检查是否有明确的API错误消息
              apiErrorMessage=$(echo "$response" | jq -r '.error.title // .message // ""') # ipinfo.io 的错误结构可能不同
              if [ -n "$apiErrorMessage" ]; then
                echo "Error geolocating (API Msg: $apiErrorMessage) for IP $ip_to_query (from target $original_target). API Response: $response" >> "$ERROR_LOG_FILE"
                echo "$original_target#${ip_to_query}#API_ERROR" >> "$OUTPUT_FILE"
              else
                # API没有明确错误，但国家信息为null或缺失
                echo "Warning: Geolocation data (country_code is null/missing) for IP $ip_to_query (from target $original_target). API Response: $response" >> "$ERROR_LOG_FILE"
                echo "$original_target#${queryIp}#GEO_DATA_MISSING" >> "$OUTPUT_FILE"
              fi
            fi
            
            # ipinfo.io 免费版大约 50k/月，每秒请求数也有一定限制
            sleep 1 # 每次API调用后延时1秒
          done < all_unique_targets.txt

          echo "Geolocation process finished. Results in $OUTPUT_FILE"
          if [ -s "$ERROR_LOG_FILE" ]; then
            echo "Some errors occurred during geolocation. Check $ERROR_LOG_FILE for details."
          fi

      - name: Commit and push if changes
        # if: env.NO_TARGETS == 'false' && env.IPDATA_API_KEY != '' # 移除API Key检查
        if: env.NO_TARGETS == 'false'
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
          git add geolocated_targets.txt geolocation_errors.txt
          
          if git diff --staged --quiet; then
            echo "No changes to commit."
          else
            # 更新提交信息以反映使用的是 ipinfo.io
            git commit -m "Update geolocated IP/Domain list (ipinfo.io) ($(date -u +'%Y-%m-%d %H:%M:%S UTC'))"
            git push
            echo "Changes committed and pushed."
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
