# GitHub Action 的名称
name: Collect IP Addresses with Geolocation

# 工作流触发条件
on:
  schedule:
    # 每天UTC时间00:00和12:00执行 (对应北京时间08:00和20:00)
    - cron: '0 0,12 * * *'
  workflow_dispatch: # 允许手动触发

# 为工作流设置权限
permissions:
  contents: write # 允许工作流写入仓库内容

# 定义一个或多个作业
jobs:
  collect-ips:
    # 指定运行环境
    runs-on: ubuntu-latest
    
    # 作业中的步骤
    steps:
    # 第一步：检出代码
    - name: Checkout repository
      uses: actions/checkout@v4
    
    # 第二步：安装依赖项
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y jq dnsutils
        pip install requests beautifulsoup4 lxml
    
    # 第三步：运行Python脚本采集IP并查询地理位置
    - name: Collect IPs with Geolocation
      run: |
        python3 << 'EOF'
        import requests
        import re
        from bs4 import BeautifulSoup
        import socket
        import time
        import json

        def get_chinese_country_name(code):
            """将国家代码映射到中文名称"""
            country_mapping = {
                "US": "美国", "CA": "加拿大", "CN": "中国", "HK": "中国香港", "TW": "中国台湾", 
                "JP": "日本", "KR": "韩国", "SG": "新加坡", "GB": "英国", "DE": "德国", 
                "FR": "法国", "AU": "澳大利亚", "NL": "荷兰", "RU": "俄罗斯", "IN": "印度", 
                "BR": "巴西", "VN": "越南", "MY": "马来西亚", "TH": "泰国", "ID": "印度尼西亚",
                "PH": "菲律宾", "IT": "意大利", "ES": "西班牙", "SE": "瑞典", "CH": "瑞士"
                # 可根据需要添加更多国家
            }
            return country_mapping.get(code, code)

        def query_ip_geolocation(ip):
            """使用 ipinfo.io API 查询IP的地理位置"""
            try:
                api_url = f"https://ipinfo.io/{ip}/json"
                response = requests.get(api_url, timeout=10)
                response.raise_for_status()
                data = response.json()
                country_code = data.get('country')
                if country_code:
                    return country_code, get_chinese_country_name(country_code)
                return None, None
            except Exception as e:
                print(f"查询IP {ip} 地理位置失败: {e}")
                return None, None

        def validate_and_filter_ips(ips):
            """验证IP地址格式并过滤掉私有IP"""
            valid_ips = []
            for ip in set(ips): # 使用set去重
                try:
                    socket.inet_aton(ip)
                    octets = ip.split('.')
                    if not (octets[0] == '10' or
                            (octets[0] == '172' and 16 <= int(octets[1]) <= 31) or
                            (octets[0] == '192' and octets[1] == '168') or
                            octets[0] == '127'):
                        valid_ips.append(ip)
                except soc
