name: Fetch and Geolocate IPs

on:
  schedule:
    # 每3小时运行一次 (0, 3, 6, 9, 12, 15, 18, 21点 UTC)
    - cron: '0 */3 * * *'
  workflow_dispatch: # 允许手动触发

# Add this permissions block
permissions:
  contents: write # Allows the workflow to write to the repository (commit and push)

jobs:
  fetch_and_process:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install jq (JSON processor)
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Fetch IPs from sources
        id: fetch_ips
        run: |
          echo "Fetching IPs from source 1..."
          curl -sSL "https://raw.githubusercontent.com/ymyuuu/IPDB/refs/heads/main/BestCF/bestcfv4.txt" > ips_source1.txt
          echo "Fetching IPs from source 2..."
          curl -sSL "https://raw.githubusercontent.com/ethgan/yxip/refs/heads/main/ip.txt" > ips_source2.txt
          
          echo "Combining and unique IPs..."
          cat ips_source1.txt ips_source2.txt | grep -Eo "([0-9]{1,3}\.){3}[0-9]{1,3}" | sort -u > all_unique_ips.txt
          
          echo "Total unique IPs found: $(wc -l < all_unique_ips.txt)"
          if [ ! -s all_unique_ips.txt ]; then
            echo "No IPs found to process."
            echo "NO_IPS=true" >> $GITHUB_ENV
          else
            echo "NO_IPS=false" >> $GITHUB_ENV
          fi

      - name: Geolocate IPs and format
        if: env.NO_IPS == 'false' # 只有当找到IP时才运行
        run: |
          echo "Starting geolocation process..."
          OUTPUT_FILE="geolocated_ips.txt"
          ERROR_LOG_FILE="geolocation_errors.txt"
          > "$OUTPUT_FILE" # 清空或创建输出文件
          > "$ERROR_LOG_FILE" # 清空或创建错误日志

          while IFS= read -r ip; do
            if [ -z "$ip" ]; then
              continue # 跳过空行
            fi

            echo "Processing IP: $ip"
            # 使用 ip-api.com 查询, fields 参数减少返回数据量, lang=zh-CN 获取中文国家名
            # 参考: https://ip-api.com/docs/api:json
            response=$(curl -sSL "http://ip-api.com/json/${ip}?fields=status,message,country,countryCode,query&lang=zh-CN")
            
            status=$(echo "$response" | jq -r .status)

            if [ "$status" = "success" ]; then
              countryCode=$(echo "$response" | jq -r .countryCode)
              countryName=$(echo "$response" | jq -r .country)
              queryIp=$(echo "$response" | jq -r .query) # 使用API返回的IP确保一致性

              # 确保国家代码和名称不为空
              if [ -z "$countryCode" ] || [ "$countryCode" = "null" ] || [ -z "$countryName" ] || [ "$countryName" = "null" ]; then
                echo "Warning: Geolocation data incomplete for IP $queryIp. API Response: $response" >> "$ERROR_LOG_FILE"
                echo "${queryIp}#UNKNOWN" >> "$OUTPUT_FILE" # 提供一个回退值
              else
                echo "${queryIp}#${countryCode}${countryName}" >> "$OUTPUT_FILE"
              fi
            else
              message=$(echo "$response" | jq -r .message // "Unknown error")
              echo "Error geolocating IP $ip: $message. API Response: $response" >> "$ERROR_LOG_FILE"
              echo "${ip}#ERROR_GEO" >> "$OUTPUT_FILE" # 标记查询失败的IP
            fi
            
            # ip-api.com 免费版每分钟限制45次请求, 这里稍微延时以避免超限
            sleep 1.5 
          done < all_unique_ips.txt

          echo "Geolocation process finished. Results in $OUTPUT_FILE"
          if [ -s "$ERROR_LOG_FILE" ]; then
            echo "Some errors occurred during geolocation. Check $ERROR_LOG_FILE for details."
          fi

      - name: Commit and push if changes
        if: env.NO_IPS == 'false' # 只有当找到IP时才运行
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
          # 将错误日志也加入版本控制，方便排查
          git add geolocated_ips.txt geolocation_errors.txt
          
          # 检查是否有暂存的更改
          if git diff --staged --quiet; then
            echo "No changes to commit."
          else
            git commit -m "Update geolocated IP list ($(date -u +'%Y-%m-%d %H:%M:%S UTC'))"
            git push
            echo "Changes committed and pushed."
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
